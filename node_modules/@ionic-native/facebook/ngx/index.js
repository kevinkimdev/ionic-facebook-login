var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var Facebook = /** @class */ (function (_super) {
    __extends(Facebook, _super);
    function Facebook() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Facebook.prototype.login = function (permissions) { return cordova(this, "login", {}, arguments); };
    Facebook.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    Facebook.prototype.getLoginStatus = function () { return cordova(this, "getLoginStatus", {}, arguments); };
    Facebook.prototype.getAccessToken = function () { return cordova(this, "getAccessToken", {}, arguments); };
    Facebook.prototype.showDialog = function (options) { return cordova(this, "showDialog", {}, arguments); };
    Facebook.prototype.api = function (requestPath, permissions) { return cordova(this, "api", {}, arguments); };
    Facebook.prototype.logEvent = function (name, params, valueToSum) { return cordova(this, "logEvent", { "successIndex": 3, "errorIndex": 4 }, arguments); };
    Facebook.prototype.logPurchase = function (value, currency) { return cordova(this, "logPurchase", {}, arguments); };
    Facebook.prototype.getDeferredApplink = function () { return cordova(this, "getDeferredApplink", {}, arguments); };
    Facebook.pluginName = "Facebook";
    Facebook.plugin = "cordova-plugin-facebook4";
    Facebook.pluginRef = "facebookConnectPlugin";
    Facebook.repo = "https://github.com/jeduan/cordova-plugin-facebook4";
    Facebook.install = "ionic cordova plugin add cordova-plugin-facebook4 --variable APP_ID=\"123456789\" --variable APP_NAME=\"myApplication\"";
    Facebook.installVariables = ["APP_ID", "APP_NAME"];
    Facebook.platforms = ["Android", "iOS", "Browser"];
    Facebook = __decorate([
        Injectable()
    ], Facebook);
    return Facebook;
}(IonicNativePlugin));
export { Facebook };
//# sourceMappingURL=data:application/json;base64,