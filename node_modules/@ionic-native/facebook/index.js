var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var FacebookOriginal = /** @class */ (function (_super) {
    __extends(FacebookOriginal, _super);
    function FacebookOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FacebookOriginal.prototype.login = function (permissions) { return cordova(this, "login", {}, arguments); };
    FacebookOriginal.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    FacebookOriginal.prototype.getLoginStatus = function () { return cordova(this, "getLoginStatus", {}, arguments); };
    FacebookOriginal.prototype.getAccessToken = function () { return cordova(this, "getAccessToken", {}, arguments); };
    FacebookOriginal.prototype.showDialog = function (options) { return cordova(this, "showDialog", {}, arguments); };
    FacebookOriginal.prototype.api = function (requestPath, permissions) { return cordova(this, "api", {}, arguments); };
    FacebookOriginal.prototype.logEvent = function (name, params, valueToSum) { return cordova(this, "logEvent", { "successIndex": 3, "errorIndex": 4 }, arguments); };
    FacebookOriginal.prototype.logPurchase = function (value, currency) { return cordova(this, "logPurchase", {}, arguments); };
    FacebookOriginal.prototype.getDeferredApplink = function () { return cordova(this, "getDeferredApplink", {}, arguments); };
    FacebookOriginal.pluginName = "Facebook";
    FacebookOriginal.plugin = "cordova-plugin-facebook4";
    FacebookOriginal.pluginRef = "facebookConnectPlugin";
    FacebookOriginal.repo = "https://github.com/jeduan/cordova-plugin-facebook4";
    FacebookOriginal.install = "ionic cordova plugin add cordova-plugin-facebook4 --variable APP_ID=\"123456789\" --variable APP_NAME=\"myApplication\"";
    FacebookOriginal.installVariables = ["APP_ID", "APP_NAME"];
    FacebookOriginal.platforms = ["Android", "iOS", "Browser"];
    return FacebookOriginal;
}(IonicNativePlugin));
var Facebook = new FacebookOriginal();
export { Facebook };
//# sourceMappingURL=data:application/json;base64,